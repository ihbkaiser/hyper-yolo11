# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# Hyper-YOLO object detection model with N3-N5 outputs. 

# Parameters
nc: 80  # number of classes
scales: # model compound scaling constants, i.e. 'model=hyper-yolon.yaml' will call hyper-yolo.yaml with scale 'n'
  # [depth, width, max_channels, threshold]
  n: [0.33, 0.25, 1024, 6]
  s: [0.33, 0.50, 1024, 8]
  m: [0.67, 0.75, 768, 10]
  l: [1.00, 1.00, 512, 10]
  x: [1.00, 1.25, 512, 12]

# Hyper-YOLO backbone
backbone:
  - [-1, 1, Conv, [64, 3, 2]]  # 0-B1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 1
  - [-1, 3, MANet, [128, True, 2, 3]] # 2-B2/4
  - [-1, 1, Conv, [256, 3, 2]]  # 3
  - [-1, 6, MANet, [256, True, 2, 5]] # 4-B3/8
  - [-1, 1, Conv, [512, 3, 2]]  # 5
  - [-1, 6, MANet, [512, True, 2, 5]] # 6-B4/16
  - [-1, 1, Conv, [1024, 3, 2]]  # 7-P5/32
  - [-1, 3, MANet, [1024, True, 2, 3]] # 8
  - [-1, 1, SPPF, [1024, 5]]  # 9-B5/32
  - [-1, 2, C2PSA, [1024]]  # 10 (yolov11 new block)

# Hyper-YOLO head
head:
  # Semantic Collecting
  - [0, 1, nn.AvgPool2d, [8, 8, 0]] # 11
  - [2, 1, nn.AvgPool2d, [4, 4, 0]] # 12
  - [4, 1, nn.AvgPool2d, [2, 2, 0]] # 13
  - [10, 1, nn.Upsample, [None, 2, 'nearest']] # 14
  - [[11, 12, 13, 6, 14], 1, Concat, [1]]  # cat 15

  # Hypergraph Computation
  - [-1, 1, Conv, [512, 1, 1]] # 16
  - [-1, 1, HyperComputeModule, [512]] # 17
  - [-1, 3, MANet, [512, True, 2, 3]] # 18

  # Semantic Collecting
  - [-1, 1, nn.AvgPool2d, [2, 2, 0]] # 19
  - [[-1, 10], 1, Concat, [1]]  # cat 20
  - [-1, 1, Conv, [1024, 1, 1]] # 21 P5

  - [[18, 6], 1, Concat, [1]]  # cat 22
  - [-1, 3, MANet, [512, False, 2, 3]]  # 23 P4

  - [18, 1, nn.Upsample, [None, 2, 'nearest']] # 24
  - [[-1, 4], 1, Concat, [1]]  # cat 25
  - [-1, 3, MANet, [256, False, 2, 3]]  # 26 P3/N3

  - [-1, 1, Conv, [256, 3, 2]] # 27
  - [[-1, 23], 1, Concat, [1]]  # 28 cat 
  - [-1, 3, MANet, [512, False, 2, 3]]  # 29 N4

  - [-1, 1, Conv, [512, 3, 2]] # 30
  - [[-1, 21], 1, Concat, [1]]  # 31 cat
  - [-1, 3, C2f, [1024, False]]  # 32 N5

  - [[26, 29, 32], 1, Detect, [nc]]  # Detect(N3, N4, N5)
